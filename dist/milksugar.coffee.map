{"version":3,"sources":["src/app.coffee","src/assets.coffee","src/core/clone.coffee","src/core/console.coffee","src/core/extend.coffee","src/core/hashcode.coffee","src/core/root.coffee","src/preloader.coffee","src/router.coffee","src/screen.coffee","src/ui/animation.coffee","src/ui/lightbox.coffee","src/widget.coffee"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dist/milksugar.coffee","sourcesContent":["define 'milksugar/app', ['jquery'], ($) ->\r\n  'use strict'\r\n  \r\n  class App\r\n    \r\n    constructor: (assets = ['image', 'view']) ->\r\n      @screens = []\r\n      @data = {}\r\n      ###\r\n      if assets? \r\n        check(assets)\r\n          .array((v) ->\r\n            for asset in v\r\n              \r\n            )\r\n          .object((v) ->\r\n            for key, value in v\r\n              Assets.add(key, value)\r\n            )\r\n        if Array.isArray(assets)\r\n          for asset in assets\r\n            Assets.add(asset)\r\n        else\r\n          for key, value of assets\r\n            Assets.add(key, value)\r\n      ###\r\n    \r\n    addScreen: (screen) ->\r\n      screens.push screen\r\n\r\n    run: ->\r\n      $title = $ 'title'\r\n\r\n      if $title.html()? and @name?\r\n        $('title').html @name","define 'milksugar/assets', ->\r\n  \"use strict\";\r\n   \r\n  Assets =\r\n    root: 'assets'\r\n    add: (pathName, alias = \"#{pathName}s\") ->\r\n      @[pathName] = (assetName) ->\r\n        realPathName = if alias then alias else pathName\r\n        MilkSugar.Assets.path MilkSugar.Assets.root, realPathName, assetName\r\n    remove: (pathName) -> delete @[pathName] if @[pathName]\r\n    path: (paths...) -> paths.join '/'","###\r\n  Cloning objects\r\n###\r\ndefine 'clone', ->\r\n  clone = (obj) ->\r\n    if not obj? or typeof obj isnt 'object'\r\n      return obj\r\n  \r\n    if obj instanceof Date\r\n      return new Date(obj.getTime()) \r\n  \r\n    if obj instanceof RegExp\r\n      flags = ''\r\n      flags += 'g' if obj.global?\r\n      flags += 'i' if obj.ignoreCase?\r\n      flags += 'm' if obj.multiline?\r\n      flags += 'y' if obj.sticky?\r\n      return new RegExp(obj.source, flags) \r\n  \r\n    newInstance = new obj.constructor()\r\n  \r\n    for key of obj\r\n      newInstance[key] = clone obj[key]\r\n  \r\n    newInstance","do (root = @) ->\r\n  ###\r\n    Console object fixes\r\n  ###\r\n  noop = ->\r\n\r\n  methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\r\n        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\r\n        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\r\n        'timeStamp', 'trace', 'warn']\r\n\r\n  console = (root.console or= {})\r\n\r\n  for i in methods\r\n    method = methods[i]\r\n    \r\n    console[method] or= noop\r\n\n\ndefine('milksugar/core/console', ->  )","###\r\n Extending objects\r\n###\r\ndefine 'extend', ->\r\n  extend = (target, objects...) ->\r\n    for obj in objects\r\n      for key, value of obj\r\n        target[key] = value\r\n  \r\n    target","###\r\n  Provides a hashcode for strings\r\n###\r\ndefine 'hashcode', ->\r\n  hashCode = (str) ->\r\n    hash = 0\r\n  \r\n    if @length == 0\r\n      return hash\r\n  \r\n    for i in str\r\n      char = str.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + char\r\n      hash = hash & hash # Convert to 32bit integer\r\n  \r\n    hash","do (root = @) ->\r\n  define 'root', ->\r\n    root\r\n","define 'milksugar/preloader', ['jquery'], ($) ->\r\n  'use strict'\r\n  \r\n  class Preloader\r\n    assetPromise = null\r\n    \r\n    constructor: (assets) ->\r\n      if Array.isArray assets\r\n        defer = $.Deferred()\r\n        \r\n        defer.resolve assets\r\n        assetPromise = defer.promise()\r\n      else\r\n        assetPromise = $.ajax\r\n          url: assets\r\n          dataType: 'JSON'\r\n      \r\n    progressChange: ->\r\n    done: ->\r\n    \r\n    start: ->\r\n      assetPromise.done (assets) ->\r\n        console.log assets        ","define 'milksugar/router', ['root'], ->\r\n  \r\n  class Router\r\n    constructor: (routes) ->\r\n      root.routie routes\r\n      \r\n    call: (name) -> root.routie name\r\n","Widget = require './widget'\r\n\r\nclass Screen\r\n  constructor: (options) ->\r\n    @name = options.name || 'home'\r\n    @route = \"/#{@name}\"\r\n    @widgets = {}\r\n    @template = \"\"\r\n\r\n  addWidget: (widget) ->\r\n\r\n  render: ->\r\n\r\nScreen.$container = $('.screen-container')\r\n\r\nmodule.exports = Screen\n\ndefine('milksugar/screen', ->  )","define 'milksugar/ui/animation', ->\r\n  'use strict'\r\n  \r\n  Animation =\r\n    interval: 300\r\n","define 'milksugar/ui/lightbox', ->\r\n  'use strict'\r\n  \r\n  class Lightbox\r\n    constructor: ->\r\n","define 'milksugar/widget', ->\r\n  'use strict'\r\n   \r\n  class Widget\r\n    constructor: ->\r\n      @data = {}\r\n    "]}